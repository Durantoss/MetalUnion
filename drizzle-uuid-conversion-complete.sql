-- Complete Drizzle Schema UUID Conversion Script
-- This script provides the complete list of changes needed in shared/schema.ts
-- to convert all varchar ID fields to proper uuid types

-- CRITICAL CHANGES NEEDED IN shared/schema.ts:

-- 1. Import uuid type (ALREADY DONE):
-- import { uuid } from "drizzle-orm/pg-core";

-- 2. Convert ALL primary key ID fields from varchar to uuid:

-- ALREADY CONVERTED:
-- ✓ users.id: uuid("id").primaryKey().default(sql`gen_random_uuid()`)
-- ✓ sessions.userId: uuid("user_id").references(() => users.id, { onDelete: "cascade" })

-- STILL NEED TO CONVERT (Primary Keys):
-- badges.id: varchar("id") → uuid("id")
-- userBadges.id: varchar("id") → uuid("id")
-- concertAttendance.id: varchar("id") → uuid("id")
-- bands.id: varchar("id") → uuid("id")
-- posts.id: varchar("id") → uuid("id")
-- postComments.id: varchar("id") → uuid("id")
-- postLikes.id: varchar("id") → uuid("id")
-- postCommentLikes.id: varchar("id") → uuid("id")
-- reviews.id: varchar("id") → uuid("id")
-- photos.id: varchar("id") → uuid("id")
-- tours.id: varchar("id") → uuid("id")
-- messages.id: varchar("id") → uuid("id")
-- comments.id: varchar("id") → uuid("id")
-- commentReactions.id: varchar("id") → uuid("id")
-- pitMessages.id: varchar("id") → uuid("id")
-- userLocations.id: varchar("id") → uuid("id")
-- proximityMatches.id: varchar("id") → uuid("id")
-- pitReplies.id: varchar("id") → uuid("id")
-- userFollows.id: varchar("id") → uuid("id")
-- reactions.id: varchar("id") → uuid("id")
-- achievements.id: varchar("id") → uuid("id")
-- userAchievements.id: varchar("id") → uuid("id")
-- notifications.id: varchar("id") → uuid("id")
-- activityFeed.id: varchar("id") → uuid("id")
-- polls.id: varchar("id") → uuid("id")
-- pollVotes.id: varchar("id") → uuid("id")
-- events.id: varchar("id") → uuid("id")
-- eventAttendees.id: varchar("id") → uuid("id")
-- reviewRatings.id: varchar("id") → uuid("id")
-- conversations.id: varchar("id") → uuid("id")
-- directMessages.id: varchar("id") → uuid("id")
-- messageEncryptionKeys.id: varchar("id") → uuid("id")
-- messageDeliveryReceipts.id: varchar("id") → uuid("id")
-- groupChats.id: varchar("id") → uuid("id")
-- groupChatMembers.id: varchar("id") → uuid("id")
-- groupMessages.id: varchar("id") → uuid("id")
-- groupMessageReactions.id: varchar("id") → uuid("id")
-- userKeyBundles.id: varchar("id") → uuid("id")
-- conversationRatchetStates.id: varchar("id") → uuid("id")
-- doubleRatchetMessages.id: varchar("id") → uuid("id")
-- groupEncryptionKeys.id: varchar("id") → uuid("id")
-- mediaUploads.id: varchar("id") → uuid("id")
-- userGroups.id: varchar("id") → uuid("id")
-- groupMembers.id: varchar("id") → uuid("id")
-- groupPosts.id: varchar("id") → uuid("id")
-- mentorProfiles.id: varchar("id") → uuid("id")
-- mentorships.id: varchar("id") → uuid("id")
-- socialConnections.id: varchar("id") → uuid("id")
-- reactionTypes.id: varchar("id") → uuid("id")
-- contentReactions.id: varchar("id") → uuid("id")
-- chatRooms.id: varchar("id") → uuid("id")
-- chatMessages.id: varchar("id") → uuid("id")
-- chatParticipants.id: varchar("id") → uuid("id")
-- friendRequests.id: varchar("id") → uuid("id")
-- userConnections.id: varchar("id") → uuid("id")
-- savedContent.id: varchar("id") → uuid("id")
-- photoAlbums.id: varchar("id") → uuid("id")
-- albumPhotos.id: varchar("id") → uuid("id")

-- 3. Convert ALL foreign key ID fields from varchar to uuid:

-- userBadges.userId: varchar("user_id") → uuid("user_id")
-- userBadges.badgeId: varchar("badge_id") → uuid("badge_id")
-- concertAttendance.userId: varchar("user_id") → uuid("user_id")
-- concertAttendance.tourId: varchar("tour_id") → uuid("tour_id")
-- bands.ownerId: varchar("owner_id") → uuid("owner_id")
-- posts.userId: varchar("user_id") → uuid("user_id")
-- postComments.postId: varchar("post_id") → uuid("post_id")
-- postComments.userId: varchar("user_id") → uuid("user_id")
-- postComments.parentId: varchar("parent_id") → uuid("parent_id")
-- postLikes.postId: varchar("post_id") → uuid("post_id")
-- postLikes.userId: varchar("user_id") → uuid("user_id")
-- postCommentLikes.commentId: varchar("comment_id") → uuid("comment_id")
-- postCommentLikes.userId: varchar("user_id") → uuid("user_id")
-- reviews.bandId: varchar("band_id") → uuid("band_id")
-- photos.bandId: varchar("band_id") → uuid("band_id")
-- tours.bandId: varchar("band_id") → uuid("band_id")
-- messages.authorId: varchar("author_id") → uuid("author_id")
-- comments.authorId: varchar("author_id") → uuid("author_id")
-- comments.targetId: varchar("target_id") → uuid("target_id")
-- comments.parentCommentId: varchar("parent_comment_id") → uuid("parent_comment_id")
-- commentReactions.commentId: varchar("comment_id") → uuid("comment_id")
-- commentReactions.userId: varchar("user_id") → uuid("user_id")
-- userLocations.userId: varchar("user_id") → uuid("user_id")
-- proximityMatches.userId1: varchar("user_id_1") → uuid("user_id_1")
-- proximityMatches.userId2: varchar("user_id_2") → uuid("user_id_2")
-- pitReplies.messageId: varchar("message_id") → uuid("message_id")
-- userFollows.followerId: varchar("follower_id") → uuid("follower_id")
-- userFollows.followingId: varchar("following_id") → uuid("following_id")
-- reactions.userId: varchar("user_id") → uuid("user_id")
-- reactions.targetId: varchar("target_id") → uuid("target_id")
-- userAchievements.userId: varchar("user_id") → uuid("user_id")
-- userAchievements.achievementId: varchar("achievement_id") → uuid("achievement_id")
-- notifications.userId: varchar("user_id") → uuid("user_id")
-- notifications.fromUserId: varchar("from_user_id") → uuid("from_user_id")
-- activityFeed.userId: varchar("user_id") → uuid("user_id")
-- activityFeed.targetId: varchar("target_id") → uuid("target_id")
-- polls.creatorId: varchar("creator_id") → uuid("creator_id")
-- pollVotes.pollId: varchar("poll_id") → uuid("poll_id")
-- pollVotes.userId: varchar("user_id") → uuid("user_id")
-- events.organizerId: varchar("organizer_id") → uuid("organizer_id")
-- eventAttendees.eventId: varchar("event_id") → uuid("event_id")
-- eventAttendees.userId: varchar("user_id") → uuid("user_id")
-- reviewRatings.reviewId: varchar("review_id") → uuid("review_id")
-- conversations.participant1Id: varchar("participant1_id") → uuid("participant1_id")
-- conversations.participant2Id: varchar("participant2_id") → uuid("participant2_id")
-- directMessages.conversationId: varchar("conversation_id") → uuid("conversation_id")
-- directMessages.senderId: varchar("sender_id") → uuid("sender_id")
-- messageEncryptionKeys.userId: varchar("user_id") → uuid("user_id")
-- messageDeliveryReceipts.messageId: varchar("message_id") → uuid("message_id")
-- messageDeliveryReceipts.userId: varchar("user_id") → uuid("user_id")
-- groupChats.createdBy: varchar("created_by") → uuid("created_by")
-- groupChatMembers.groupId: varchar("group_id") → uuid("group_id")
-- groupChatMembers.userId: varchar("user_id") → uuid("user_id")
-- groupMessages.groupId: varchar("group_id") → uuid("group_id")
-- groupMessages.senderId: varchar("sender_id") → uuid("sender_id")
-- groupMessages.replyToId: varchar("reply_to_id") → uuid("reply_to_id")
-- groupMessageReactions.messageId: varchar("message_id") → uuid("message_id")
-- groupMessageReactions.userId: varchar("user_id") → uuid("user_id")
-- userKeyBundles.userId: varchar("user_id") → uuid("user_id")
-- conversationRatchetStates.conversationId: varchar("conversation_id") → uuid("conversation_id")
-- conversationRatchetStates.userId: varchar("user_id") → uuid("user_id")
-- doubleRatchetMessages.conversationId: varchar("conversation_id") → uuid("conversation_id")
-- doubleRatchetMessages.senderId: varchar("sender_id") → uuid("sender_id")
-- groupEncryptionKeys.groupId: varchar("group_id") → uuid("group_id")
-- groupEncryptionKeys.createdBy: varchar("created_by") → uuid("created_by")
-- mediaUploads.uploaderId: varchar("uploader_id") → uuid("uploader_id")
-- userGroups.creatorId: varchar("creator_id") → uuid("creator_id")
-- groupMembers.groupId: varchar("group_id") → uuid("group_id")
-- groupMembers.userId: varchar("user_id") → uuid("user_id")
-- groupPosts.groupId: varchar("group_id") → uuid("group_id")
-- groupPosts.authorId: varchar("author_id") → uuid("author_id")
-- mentorProfiles.userId: varchar("user_id") → uuid("user_id")
-- mentorships.mentorId: varchar("mentor_id") → uuid("mentor_id")
-- mentorships.menteeId: varchar("mentee_id") → uuid("mentee_id")
-- socialConnections.userId: varchar("user_id") → uuid("user_id")
-- contentReactions.userId: varchar("user_id") → uuid("user_id")
-- contentReactions.targetId: varchar("target_id") → uuid("target_id")
-- contentReactions.reactionTypeId: varchar("reaction_type_id") → uuid("reaction_type_id")
-- chatMessages.roomId: varchar("room_id") → uuid("room_id")
-- chatMessages.userId: varchar("user_id") → uuid("user_id")
-- chatMessages.replyToId: varchar("reply_to_id") → uuid("reply_to_id")
-- chatParticipants.roomId: varchar("room_id") → uuid("room_id")
-- chatParticipants.userId: varchar("user_id") → uuid("user_id")
-- friendRequests.senderId: varchar("sender_id") → uuid("sender_id")
-- friendRequests.receiverId: varchar("receiver_id") → uuid("receiver_id")
-- userConnections.userId1: varchar("user_id1") → uuid("user_id1")
-- userConnections.userId2: varchar("user_id2") → uuid("user_id2")
-- savedContent.userId: varchar("user_id") → uuid("user_id")
-- savedContent.contentId: varchar("content_id") → uuid("content_id")
-- photoAlbums.userId: varchar("user_id") → uuid("user_id")
-- photoAlbums.coverPhotoId: varchar("cover_photo_id") → uuid("cover_photo_id")
-- albumPhotos.albumId: varchar("album_id") → uuid("album_id")
-- albumPhotos.photoId: varchar("photo_id") → uuid("photo_id")

-- SUMMARY:
-- This conversion will ensure that ALL ID fields in the Drizzle schema match
-- the UUID types created by the PostgreSQL migration script, eliminating the
-- "operator does not exist: character varying = uuid" error completely.

-- The error occurs because:
-- 1. PostgreSQL migration creates UUID columns
-- 2. Drizzle schema defines varchar columns
-- 3. When Drizzle tries to compare/join these fields, PostgreSQL fails
--    because it can't compare varchar with uuid without explicit casting

-- After this conversion:
-- 1. Drizzle schema will use uuid() for all ID fields
-- 2. PostgreSQL database has UUID columns
-- 3. Type matching will be perfect, eliminating the error

SELECT 'Complete Drizzle UUID conversion plan documented' as status;
